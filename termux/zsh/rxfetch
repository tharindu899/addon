#!/data/data/com.termux/files/usr/bin/env bash

c1="\e[1;32m" # Green
c2="\e[39m"   # Wite
STOP="\e[0m"

LOGO="
    ;,           ,;
     ';,.-----.,;'
    ,'           ',
   /    ${c2}O     O${c1}    \\
  |                 |
  '-----------------'
"
printf "${c1}${LOGO}${STOP}"

#!/data/data/com.termux/files/usr/bin/bash

tmp=$(mktemp -d)
trap 'rm -rf "$tmp"' EXIT

# Fix loadavg
uptime | grep -Po "average: \K.+"| awk -F", " '{ print $1,$2,$3 }' > $tmp/loadavg

# get load averages
IFS=" " read LOAD1 LOAD5 LOAD15 <<<$(cat $tmp/loadavg)
# get free memory
IFS=" " read USED AVAIL TOTAL <<<$(free -htm | grep "Mem" | awk {'print $3,$7,$2'})
# get processes
PROCESS=$(ps -eo user=|sort|uniq -c | awk '{ print $2 " " $1 }')
PROCESS_ALL=$(echo "$PROCESS"| awk {'print $2'} | awk '{ SUM += $1} END { print SUM }')
PROCESS_ROOT=$(echo "su -c ${PROCESS}"| grep root | awk {'print $2'})
PROCESS_USER=$(echo "$PROCESS"| grep -v root | awk {'print $2'} | awk '{ SUM += $1} END { print SUM }')
# get processors
PROCESSOR_NAME=$(grep "model name" /proc/cpuinfo | cut -d ' ' -f3- | awk {'print $0'} | head -1)
PROCESSOR_COUNT=$(grep -ioP 'processor\t:' /proc/cpuinfo | wc -l)

if [[ -d /system/app/ && -d /system/priv-app ]]; then
    DISTRO="Android $(getprop ro.build.version.release)"
    MODEL="$(getprop ro.product.brand) $(getprop ro.product.model)"
fi
B="\e[1;34m"
W="\e[0;39m"
G="\e[1;32m"
C="\e[1;36m"
R="\e[1;31m"
Y="\e[1;33m"
BOLD='\033[1m'

echo -e "
${W}${BOLD}  ${B}System Info:
$Y  Distro    $R: $W$DISTRO
$Y  Host      $R: $W$MODEL
$Y  Kernel    $R: $W$(uname -sr)
$Y  Uptime    $R: $W$(uptime -p)
$Y  Load      $R: $G$LOAD1$W (1m), $G$LOAD5$W (5m), $G$LOAD15$W (15m)
$Y  Processes $R: $G$PROCESS_USER$W (user), $G$PROCESS_ALL$W (total)
$Y  CPU       $R: $W$PROCESSOR_NAME ($G$PROCESSOR_COUNT$W vCPU)
$Y  Memory    $R: $G$USED$W used, $G$AVAIL$W avail, $G$TOTAL$W total$W"

#!/data/data/com.termux/files/usr/bin/bash

# config
max_usage=90
alert_usage=75
bar_width=50
# colors
green="\e[1;32m"
red="\e[1;31m"
yellow="\e[1;33m"
blue="\e[1;34m"
BOLD='\033[1m'
NC='\033[0m'

# disk usage: ignore zfs, squashfs & tmpfs, and exclude the line containing "/mnt/mdfs/groups"
mapfile -t dfs < <(df -H -t sdcardfs -t fuse -t fuse.rclone | tail -n+2 | grep -v "/mnt/mdfs/groups")
printf "\n  ${blue}${BOLD}Disk Usage:${NC}${NC}  \n"

for line in "${dfs[@]}"; do
    # Extract relevant information
    filesystem=$(echo "$line" | awk '{print $6}')
    used_space_raw=$(echo "$line" | awk '{print $3}')
    total_space_raw=$(echo "$line" | awk '{print $2}')
    usage_percentage=$(echo "$line" | awk '{print $5}' | sed 's/%//')

    # Remove the "G" character from sizes to maintain GB format
    used_space_gb=$(echo "$used_space_raw" | sed 's/G//')
    total_space_gb=$(echo "$total_space_raw" | sed 's/G//')

    # Calculate free space in GB
    free_space_gb=$(echo "$total_space_gb - $used_space_gb" | bc)

    # Color is green if usage_percentage < max_usage, else red
    if [ "${usage_percentage}" -ge "${alert_usage}" ]; then
        color=$yellow
    elif [ "${usage_percentage}" -ge "${max_usage}" ]; then
        color=$red
    else 
        color=$green
    fi

    # Print the formatted line
    printf "  ${yellow}${BOLD}%s${NC}${NC}             ${blue}%sGB/%sGB${NC} = ${green}%sGB(%s%%)${NC}\n" "$filesystem" "$used_space_gb" "$total_space_gb" "$free_space_gb" "$usage_percentage"

    # Print the colored bar
    used_width=$((($usage_percentage * $bar_width) / 100))
    bar="${color}\uee03"
    for ((i=0; i<$used_width; i++)); do
        bar+="\uee04"
    done
    bar+="${color}"
    for ((i=$used_width; i<$bar_width; i++)); do
        bar+="\uee01"
    done
    if [ "${usage_percentage}" -ge "${max_usage}" ]; then
        bar+="${color}\uee05"
    else
        bar+="${color}\uee02"
    fi
    echo -e "  ${bar}\n"
done
